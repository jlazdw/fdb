package org.janusgraph.diskstorage.tracing;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Common request context used by NuGraph Service and NuGraph Storage Plugin, to allow the request context propagated
 * from NuGraph Service to NuGraph Storage Plugin.
 *
 */
public class CallContext {
    /**
     * The operation name that is remotely invoked. It can be traverse, read or write or update.
     */
    private final String operationName;

    /**
     * The keyspace name that is remotely accessed.
     */
    private final String keyspaceName;


    /**
     * The client side specified deadline for the whole end-to-end invocation, in nano seconds.
     */
    private final long clientDeadline;


    /**
     * The target time for this request to be serviced in before the client will cancel this transaction, in nano seconds
     */
    private final long targetResponseTime;


    /**
     * The request id propagated from the client all the way down to the storage plugin
     */
    private final String requestId;

    /**
     * The request id generated by Tinkerpop
     */
    private final String gremlinRequestId;

    /**
     * The application id passed from the client.
     */
    private final String applicationId;


    /**
     * The client IP address provided
     */
    private final String clientAddress;

    /**
     * The request time stamp issued from the client, in milliseconds
     */
    private final long requestTimeStamp;

    /**
     * The flag to know whether this call is in read-only mode or not
     */
    private final boolean isReadOnly;

    /**
     * audit logger object
     */
    private final Logger auditLogger;


    /**
     *
     * @param operationName operation name
     * @param keyspaceName keyspace name
     * @param clientDeadline client specified deadline time
     * @param targetResponseTime target response time specified in nano seconds
     * @param requestId the request identifier
     * @param applicationId the application identifier
     * @param clientAddress the client's IP address
     * @param requestTimeStamp the time stamp on the client request
     */
    public CallContext (final String operationName, final String keyspaceName, final long clientDeadline,
                        final long targetResponseTime, final String requestId, final String applicationId,
                        final String clientAddress, final long requestTimeStamp, final String gremlinRequestId,
                        final Logger auditLogger,
                        final boolean isReadOnly) {
        this.operationName = operationName;
        this.keyspaceName = keyspaceName;
        this.clientDeadline = clientDeadline;
        this.targetResponseTime = targetResponseTime;
        this.requestId = requestId;
        this.applicationId = applicationId;
        this.clientAddress = clientAddress;
        this.requestTimeStamp = requestTimeStamp;
        this.gremlinRequestId = gremlinRequestId;
        this.auditLogger = auditLogger;
        this.isReadOnly = isReadOnly;
    }


    public String  getOperationName() {
        return operationName;
    }

    public String getKeyspaceName() {
        return this.keyspaceName;
    }

    public long getClientDeadline() {
        return this.clientDeadline;
    }

    public long getTargetResponseTime() {
        return this.targetResponseTime;
    }

    public String getRequestId() {
        return this.requestId;
    }

    public String getApplicationId() {
        return this.applicationId;
    }

    public String getClientAddress() {
        return this.clientAddress;
    }

    public long getRequestTimeStamp() {
        return this.requestTimeStamp;
    }

    public String getGremlinRequestId() {
        return this.gremlinRequestId;
    }

    public boolean isReadOnly() {
        return this.isReadOnly;
    }

    public Logger getAuditLogger() { return auditLogger; }
}
